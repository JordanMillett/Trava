@using Trava.Pages
@inject TranslationService Translation

<span class="hoverspace" @onmouseover="GetTranslation">
    <span class="term @GetCSSColor()">@Lemma.DisplayText</span>
    <div class="popup">
        @if(HoverLoaded)
        {
            @if(Term != null)
            {
                <span><small>@Lemma.PartOfSpeech.ToString()</small></span>
                
                if(Term is RussianNoun noun)
                {
                    <span><small> (@Lemma.GetNounDescription())</small></span>
                }

                if(Term is RussianAdjective adjective)
                {
                    <span><small> (@Lemma.GetAdjectiveDescription())</small></span>
                }

                if(Term is RussianVerb verb)
                {
                    <span><small> (@Lemma.GetVerbDescription())</small></span>
                }

                <br>
                <span><strong>@Lemma.NormalForm</strong>  ← @Lemma.DisplayText</span>
                <hr style="margin: 0; padding:0;">
                string[] definitions = Term.Translation.Split(";");
                foreach (string definition in definitions)
                {
                    <span>• @definition</span><br>
                }
            }
            else
            {
                <span><strong><i>unknown term</i></strong></span>
            }
        }
    </div>
</span>

<style>
    .yellow { background-color: #FFFF77; }      
    .red { background-color: #FFAE77; }    
    .green { background-color: #AEFF77; }
    .blue { background-color: #77C9FF; } 
    .purple { background-color: #C977FF; } 
    .pink { background-color: #FF77E4; } 
    .tan { background-color: #FFEDCC; }      
</style>

@code 
{
    [Parameter, EditorRequired] public RussianLemma Lemma { get; set; }
    [Parameter, EditorRequired] public Home.HighlightTypes SelectedHighlight { get; set; }

    bool HoverLoaded = false;
    RussianTerm Term = null!;

    public void GetTranslation()
    {
        //if(!HoverLoaded)
            Term = Translation.ConvertToTerm(Lemma);
        HoverLoaded = true;
    }

    public string GetCSSColor()
    {
        if(SelectedHighlight == Home.HighlightTypes.None)
            return "";

        if(SelectedHighlight == Home.HighlightTypes.PartsOfSpeech)
            return Lemma.PartOfSpeech switch
            {
                PartOfSpeechType.Noun => "yellow",
                PartOfSpeechType.Verb => "red",
                PartOfSpeechType.Adjective => "green",
                _ => "tan"
            };
        
        if(SelectedHighlight == Home.HighlightTypes.NounCase)
            return "";

        if(SelectedHighlight == Home.HighlightTypes.NounCase)
            return Lemma.NounCase switch
            {
                NounCaseType.Nominative => "yellow",
                NounCaseType.Accusative => "red",
                NounCaseType.Genitive => "green",
                NounCaseType.Prepositional => "blue",
                NounCaseType.Instrumental => "purple",
                NounCaseType.Dative => "pink",
                _ => "tan"
            };

        return "";
    }
}
