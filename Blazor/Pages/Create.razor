@page "/create"
@inject ILemmaService LemmaService
@inject INoteService NoteService

<h1>Create</h1>

<Button Color="ButtonColor.Primary" class="btn" @onclick="Process">Process Text</Button>

<Button Color="ButtonColor.Primary" class="btn" @onclick="Save">Save Note</Button>

<Dropdown Color="DropdownColor.Primary">
    <DropdownToggleButton>
        Highlight: @SelectedHighlight.ToString()
    </DropdownToggleButton>
    <DropdownMenu>
        @foreach (var choice in Enum.GetValues<HighlightTypes>())
        {
            <DropdownItem @onclick="() => SelectHighlight(choice)">
                @choice.ToString()
            </DropdownItem>
        }
    </DropdownMenu>
</Dropdown>



<br><br>

@foreach (Lemma lemma in Lemmas)
{
    if(!string.IsNullOrEmpty(lemma.NormalForm))
    {
        //<span>@lemma.NormalForm</span>
        <HoverWord Lemma="@lemma" SelectedHighlight="@SelectedHighlight"/>
    }else if (Regex.IsMatch(lemma.DisplayText, @"^\r?\n$"))
    {
        <br>
    }else if(string.IsNullOrWhiteSpace(lemma.DisplayText))
    {
        @((MarkupString)"&nbsp;")  
    }else
    {
        @lemma.DisplayText
    }
}

<br><br>

<TextInput @bind-Value="@Title" Placeholder="Note Title..." />

<div class="row">
    <div class="col-12">
        <textarea @bind="InputText"></textarea>
    </div>
</div>

<div class="cursive">
    <p>@InputText</p>
</div>

<style>
    textarea
    {
    resize: none;
    min-width: 100%;
    height: 500px;
    }
</style>

@code 
{
    public enum HighlightTypes
    {
        None,
        PartsOfSpeech,
        NounCase
    }

    public HighlightTypes SelectedHighlight = HighlightTypes.None;

    string InputText = "";
    string Title = "";

    List<Lemma> Lemmas = [];

    private void SelectHighlight(HighlightTypes chosen)
    {
        SelectedHighlight = chosen;
    }

    public void Save()
    {
        if(!string.IsNullOrEmpty(Title) && !string.IsNullOrEmpty(InputText))
        {
            NoteService.CreateNote(Title, InputText);

            InputText = "";
            Title = "";
            Process();
        }
    }  

    public void Process()
    {
        Lemmas = [];

        var lines = Regex.Split(InputText, @"\r?\n");

        foreach (var line in lines)
        {
            if (string.IsNullOrWhiteSpace(line))
            {
                Lemmas.Add(new Lemma("\n"));
                continue;
            }

            var found = Regex.Matches(line, @"\w+|[^\w\s]+|\s+")
                .Cast<Match>()
                .Select(m =>
                {
                    string displayText = m.Value;

                    if (Regex.IsMatch(displayText, @"^\w+$"))
                    {
                        Lemma lemma = LemmaService.Lemmatize(displayText);
                        return lemma;
                    }
                    else
                    {
                        return new Lemma(displayText);
                    }
                });

            Lemmas.AddRange(found);
            Lemmas.Add(new Lemma("\n"));
        }
    }
}

