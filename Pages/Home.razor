@page "/home"
@using Trava.Scripts.Translations
@inject TranslationService Translation
@inject MorphologyService Morphology

<h1>Home</h1>

<Button Color="ButtonColor.Primary" class="btn" @onclick="Process">Process Text</Button>
<br><br>

@foreach (RussianLemma lemma in Lemmas)
{
    if(!string.IsNullOrEmpty(lemma.NormalForm))
    {
        //<span>@lemma.NormalForm</span>
        <HoverWord Lemma="@lemma"/>
    }else if (Regex.IsMatch(lemma.DisplayText, @"^\r?\n$"))
    {
        <br>
    }else if(string.IsNullOrWhiteSpace(lemma.DisplayText))
    {
        @((MarkupString)"&nbsp;")  
    }else
    {
        @lemma.DisplayText
    }
}

<br><br>

<div class="row">
    <div class="col-12">
        <textarea @bind="InputText"></textarea>
    </div>
</div>

<style>
    textarea
    {
    resize: none;
    min-width: 100%;
    height: 500px;
    }
</style>

@code 
{
    string InputText = "";

    List<RussianLemma> Lemmas = [];

    protected override async Task OnInitializedAsync()
    {
        await Morphology.TryStartPython();
    }

    public void Process()
    {
        Lemmas = [];

        var lines = Regex.Split(InputText, @"\r?\n");

        foreach (var line in lines)
        {
            if (string.IsNullOrWhiteSpace(line))
            {
                Lemmas.Add(new RussianLemma("\n"));
                continue;
            }

            var found = Regex.Matches(line, @"\w+|[^\w\s]+|\s+")
                .Cast<Match>()
                .Select(m =>
                {
                    string displayText = m.Value;

                    if (Regex.IsMatch(displayText, @"^\w+$"))
                    {
                        RussianLemma lemma = Morphology.Lemmatize(displayText);
                        return lemma;
                    }
                    else
                    {
                        return new RussianLemma(displayText);
                    }
                });

            Lemmas.AddRange(found);
            Lemmas.Add(new RussianLemma("\n"));
        }
    }
}

