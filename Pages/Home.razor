@page "/home"
@using Trava.Scripts.Translations
@inject TranslationService Translation
@inject MorphologyService Morphology

<h1>Home</h1>

<Button Color="ButtonColor.Primary" class="btn" @onclick="Process">Process Text</Button>
<br><br>

<!--
@foreach (var term in Terms)
{
    if(term.key != null)
    {
        <HoverWord Term="@term"/>
    }else if (Regex.IsMatch(term.text, @"^\r?\n$"))
    {
        <br>
    }else if(string.IsNullOrWhiteSpace(term.text))
    {
        @((MarkupString)"&nbsp;")  
    }else
    {
        @term.text
    }
}
-->

<br><br>

<div class="row">
    <div class="col-12">
        <textarea @bind="InputText"></textarea>
    </div>
</div>

<style>
    textarea
    {
    resize: none;
    min-width: 100%;
    height: 500px;
    }
</style>

@code 
{
    string InputText = "";

    List<(string original, RussianLemma lemma)> Terms = [];

    protected override async Task OnInitializedAsync()
    {
        await Morphology.TryStartPython();
    }

    public void Process()
    {
        Terms = [];

        var lines = Regex.Split(InputText, @"\r?\n");

        foreach (var line in lines)
        {
            if (string.IsNullOrWhiteSpace(line))
            {
                Terms.Add(("\n", null));
                continue;
            }

            var lemmas = Regex.Matches(line, @"\w+|[^\w\s]+|\s+")
                .Cast<Match>()
                .Select(m =>
                {
                    string original = m.Value;

                    if (Regex.IsMatch(original, @"^\w+$"))
                    {
                        RussianLemma lemma = Morphology.Lemmatize(original);
                        return (original, lemma);
                    }
                    else
                    {
                        return (original, null);
                    }
                });

            Terms.AddRange(lemmas);
            Terms.Add(("\n", null));
        }
    }
}

